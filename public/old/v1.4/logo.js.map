{
  "version": 3,
  "sources": ["../src/lib/utils.ts", "../src/logo.ts"],
  "sourcesContent": ["export function requireNonnull<T>(t: T | undefined | null, errorMessage = () => `Unexpected state: ${String(t)}`): T {\n  if (t == null) throw Error(errorMessage());\n  return t;\n}\n\nexport function strictParseInt(s: string | undefined | null, errorMessage = () => `Unexpected argument: ${String(s)}`): number {\n  const n = parseInt(s ?? \"\");\n  if (isNaN(n)) throw Error(errorMessage());\n  return n;\n}\n\nexport function requireType<T>(\n  o: unknown,\n  t: new (...a: unknown[]) => T,\n  errorMessage = () => `Unexpected type: expected as ${String(t)}, but actual type ${String(o)}`,\n): T {\n  if (o instanceof t) return o;\n  throw Error(errorMessage());\n}\n\nexport function component<T extends HTMLElement = HTMLElement>(id: string | undefined | null, t?: new (...a: unknown[]) => T): T {\n  const i = requireNonnull(id, () => \"Unexpected argument: id is null\");\n  const e = requireNonnull(document.getElementById(i), () => `Element not found: #${i}`);\n  return t ? requireType(e, t) : (e as T);\n}\n\nexport function removeAllChildren(e: HTMLElement): void {\n  while (e.lastChild) e.removeChild(e.lastChild);\n}\n\nexport function humanreadableDistance([direction, distance]: [Direction | null, number]): string {\n  const dir = direction ?? \"\";\n  if (distance < 1000) {\n    return `${dir} ${distance.toString()}m`;\n  }\n  return `${dir} ${(distance / 1000).toFixed(2)}km`;\n}\n\nexport function waitAnimationFrame(): Promise<number> {\n  return new Promise((r) => requestAnimationFrame(r));\n}\n\ninterface EventOffsets {\n  offsetX: number;\n  offsetY: number;\n}\n\nexport async function formatCoords(\n  map: GameMapSize | null,\n  canvas: HTMLCanvasElement,\n  elevation: (coods: GameCoords) => Promise<number | null>,\n  event: EventOffsets | null,\n): Promise<string> {\n  if (!event || !map) return \"E/W: -, N/S: -, Elev: -\";\n\n  const gameCoords = canvasEventToGameCoords(event, map, canvas);\n  if (gameCoords === null) return \"E/W: -, N/S: -, Elev: -\";\n\n  const y = (await elevation(gameCoords)) ?? \"-\";\n  return `E/W: ${gameCoords.x.toString()}, N/S: ${gameCoords.z.toString()}, Elev: ${y.toString()}`;\n}\n\nexport function downloadCanvasPng(fileName: string, canvas: HTMLCanvasElement): void {\n  const a = document.createElement(\"a\");\n  a.download = fileName;\n  a.href = canvas.toDataURL(\"image/png\");\n  a.click();\n}\n\nexport async function sleep(msec: number): Promise<void> {\n  return new Promise((r) => setTimeout(r, msec));\n}\n\nexport function gameMapSize(s: { width: number; height: number }): GameMapSize {\n  return { type: \"game\", ...s };\n}\n\nexport function gameCoords(c: { x: number; z: number }): GameCoords {\n  return { type: \"game\", ...c };\n}\n\n/** Returns null if the event was fired out of the canvas */\nexport function canvasEventToGameCoords(event: EventOffsets, mapSize: GameMapSize, canvasSize: HTMLCanvasElement): GameCoords | null {\n  // in-game scale coords with left-top offset\n  const gx = (event.offsetX * mapSize.width) / canvasSize.width;\n  const gz = (event.offsetY * mapSize.height) / canvasSize.height;\n  if (gx < 0 || gx >= mapSize.width || gz < 0 || gz >= mapSize.height) {\n    return null;\n  }\n\n  // in-game coords (center offset)\n  const x = gx - Math.floor(mapSize.width / 2);\n  const z = Math.floor(mapSize.height / 2) - gz;\n  return gameCoords({ x: Math.round(x), z: Math.round(z) });\n}\n\nexport function threePlaneSize(width: number, height: number): ThreePlaneSize {\n  return { type: \"threePlane\", width, height };\n}\n\nexport function printError(e: unknown): void {\n  console.error(\"%o\", e);\n}\n\nexport async function fetchJson<T>(url: string): Promise<T> {\n  const r = await fetch(url);\n  if (!r.ok) throw Error(`Failed to fetch ${url}: ${r.statusText}`);\n  return (await r.json()) as T;\n}\n\nexport function basename(path: string) {\n  return path.substring(path.lastIndexOf(\"/\") + 1);\n}\n\nexport async function readWholeStream(stream: ReadableStream<Uint8Array>): Promise<Uint8Array> {\n  return new Uint8Array(await new Response(stream).arrayBuffer());\n}\n", "import { component, printError } from \"./lib/utils\";\n\nconst FONT_FACE = new FontFace(\"Noto Sans Symbols 2\", \"url('./NotoSansSymbols2.subset.woff2') format('woff2')\");\n\nfunction main(): void {\n  renderLogo1(component(\"logo1\", HTMLCanvasElement)).catch(printError);\n  renderLogo2(component(\"logo2\", HTMLCanvasElement)).catch(printError);\n}\n\n/**\n * Put a mark at center to check if the logo is centered\n */\n// eslint-disable-next-line @typescript-eslint/no-inferrable-types\nconst PUT_CENTER: boolean = false;\n\nconst WIDTH = 256; // px\n\n/** Draw by code */\nasync function renderLogo1(canvas: HTMLCanvasElement): Promise<void> {\n  canvas.width = WIDTH;\n  canvas.height = WIDTH;\n\n  await FONT_FACE.load();\n  document.fonts.add(FONT_FACE);\n\n  const ctx = canvas.getContext(\"2d\");\n  if (!ctx) return;\n  putText(ctx, { text: \"\u2718\", x: WIDTH / 2 + 8, z: WIDTH / 2 + 24, size: 220 });\n\n  if (PUT_CENTER) putPointCenter(ctx, 2, \"blue\");\n}\n\nconst LINE_WIDTH_FACTOR = 0.04;\n\nfunction putText(ctx: CanvasRenderingContext2D, { text, x, z, size }: { text: string; x: number; z: number; size: number }): void {\n  ctx.font = `${size.toString()}px '${FONT_FACE.family}'`;\n  ctx.fillStyle = \"red\";\n  ctx.textAlign = \"center\";\n  ctx.textBaseline = \"middle\";\n\n  ctx.lineWidth = Math.round(size * LINE_WIDTH_FACTOR * 3);\n  ctx.strokeStyle = \"black\";\n  ctx.strokeText(text, x, z);\n\n  ctx.fillText(text, x, z);\n\n  ctx.lineWidth = Math.round(size * LINE_WIDTH_FACTOR);\n  ctx.strokeStyle = \"white\";\n  ctx.strokeText(text, x, z);\n}\n\nfunction putPointCenter(ctx: CanvasRenderingContext2D, size: number, color: string): void {\n  ctx.fillStyle = color;\n  ctx.fillRect(WIDTH / 2 - size / 2, WIDTH / 2 - size / 2, size, size);\n}\n\n/** Load logo.svg */\nasync function renderLogo2(canvas: HTMLCanvasElement): Promise<void> {\n  canvas.width = WIDTH;\n  canvas.height = WIDTH;\n\n  await FONT_FACE.load();\n  document.fonts.add(FONT_FACE);\n\n  const ctx = canvas.getContext(\"2d\");\n  if (!ctx) return;\n  const img = new Image();\n  img.src = \"logo.svg\";\n  await new Promise((resolve) => {\n    img.onload = resolve;\n    img.onerror = resolve;\n  });\n  ctx.drawImage(img, 0, 0, WIDTH, WIDTH);\n\n  if (PUT_CENTER) putPointCenter(ctx, 2, \"blue\");\n}\n\nif (document.readyState === \"loading\") {\n  document.addEventListener(\"DOMContentLoaded\", main);\n} else {\n  main();\n}\n"],
  "mappings": "mBAAO,SAASA,EAAkBC,EAAyBC,EAAe,IAAM,qBAAqB,OAAOD,CAAC,CAAC,GAAO,CACnH,GAAIA,GAAK,KAAM,MAAM,MAAMC,EAAa,CAAC,EACzC,OAAOD,CACT,CAQO,SAASE,EACdC,EACAC,EACAC,EAAe,IAAM,gCAAgC,OAAOD,CAAC,CAAC,qBAAqB,OAAOD,CAAC,CAAC,GACzF,CACH,GAAIA,aAAaC,EAAG,OAAOD,EAC3B,MAAM,MAAME,EAAa,CAAC,CAC5B,CAEO,SAASC,EAA+CC,EAA+BH,EAAmC,CAC/H,IAAMI,EAAIC,EAAeF,EAAI,IAAM,iCAAiC,EAC9DG,EAAID,EAAe,SAAS,eAAeD,CAAC,EAAG,IAAM,uBAAuBA,CAAC,EAAE,EACrF,OAAOJ,EAAIF,EAAYQ,EAAGN,CAAC,EAAKM,CAClC,CA4EO,SAASC,EAAW,EAAkB,CAC3C,QAAQ,MAAM,KAAM,CAAC,CACvB,CCpGA,IAAMC,EAAY,IAAI,SAAS,sBAAuB,wDAAwD,EAE9G,SAASC,GAAa,CACpBC,EAAYC,EAAU,QAAS,iBAAiB,CAAC,EAAE,MAAMC,CAAU,EACnEC,EAAYF,EAAU,QAAS,iBAAiB,CAAC,EAAE,MAAMC,CAAU,CACrE,CAMA,IAAME,EAAsB,GAEtBC,EAAQ,IAGd,eAAeL,EAAYM,EAA0C,CACnEA,EAAO,MAAQD,EACfC,EAAO,OAASD,EAEhB,MAAMP,EAAU,KAAK,EACrB,SAAS,MAAM,IAAIA,CAAS,EAE5B,IAAMS,EAAMD,EAAO,WAAW,IAAI,EAC7BC,IACLC,EAAQD,EAAK,CAAE,KAAM,SAAK,EAAGF,EAAQ,EAAI,EAAG,EAAGA,EAAQ,EAAI,GAAI,KAAM,GAAI,CAAC,EAEtED,GAAYK,EAAeF,EAAK,EAAG,MAAM,EAC/C,CAEA,IAAMG,EAAoB,IAE1B,SAASF,EAAQD,EAA+B,CAAE,KAAAI,EAAM,EAAAC,EAAG,EAAAC,EAAG,KAAAC,CAAK,EAA+D,CAChIP,EAAI,KAAO,GAAGO,EAAK,SAAS,CAAC,OAAOhB,EAAU,MAAM,IACpDS,EAAI,UAAY,MAChBA,EAAI,UAAY,SAChBA,EAAI,aAAe,SAEnBA,EAAI,UAAY,KAAK,MAAMO,EAAOJ,EAAoB,CAAC,EACvDH,EAAI,YAAc,QAClBA,EAAI,WAAWI,EAAMC,EAAGC,CAAC,EAEzBN,EAAI,SAASI,EAAMC,EAAGC,CAAC,EAEvBN,EAAI,UAAY,KAAK,MAAMO,EAAOJ,CAAiB,EACnDH,EAAI,YAAc,QAClBA,EAAI,WAAWI,EAAMC,EAAGC,CAAC,CAC3B,CAEA,SAASJ,EAAeF,EAA+BO,EAAcC,EAAqB,CACxFR,EAAI,UAAYQ,EAChBR,EAAI,SAASF,EAAQ,EAAIS,EAAO,EAAGT,EAAQ,EAAIS,EAAO,EAAGA,EAAMA,CAAI,CACrE,CAGA,eAAeX,EAAYG,EAA0C,CACnEA,EAAO,MAAQD,EACfC,EAAO,OAASD,EAEhB,MAAMP,EAAU,KAAK,EACrB,SAAS,MAAM,IAAIA,CAAS,EAE5B,IAAMS,EAAMD,EAAO,WAAW,IAAI,EAClC,GAAI,CAACC,EAAK,OACV,IAAMS,EAAM,IAAI,MAChBA,EAAI,IAAM,WACV,MAAM,IAAI,QAASC,GAAY,CAC7BD,EAAI,OAASC,EACbD,EAAI,QAAUC,CAChB,CAAC,EACDV,EAAI,UAAUS,EAAK,EAAG,EAAGX,EAAOA,CAAK,EAEjCD,GAAYK,EAAeF,EAAK,EAAG,MAAM,CAC/C,CAEI,SAAS,aAAe,UAC1B,SAAS,iBAAiB,mBAAoBR,CAAI,EAElDA,EAAK",
  "names": ["requireNonnull", "t", "errorMessage", "requireType", "o", "t", "errorMessage", "component", "id", "i", "requireNonnull", "e", "printError", "FONT_FACE", "main", "renderLogo1", "component", "printError", "renderLogo2", "PUT_CENTER", "WIDTH", "canvas", "ctx", "putText", "putPointCenter", "LINE_WIDTH_FACTOR", "text", "x", "z", "size", "color", "img", "resolve"]
}
