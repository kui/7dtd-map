{
  "version": 3,
  "sources": ["../../src/lib/utils.ts", "../../src/lib/throttled-invoker.ts", "../../src/lib/storage.ts", "../../src/lib/cache-holder.ts", "../../src/lib/map-renderer.ts", "../../src/worker/map-renderer.ts"],
  "sourcesContent": ["export function requireNonnull<T>(t: T | undefined | null, errorMessage = () => `Unexpected state: ${String(t)}`): T {\n  if (t == null) throw Error(errorMessage());\n  return t;\n}\n\nexport function strictParseInt(s: string | undefined | null, errorMessage = () => `Unexpected argument: ${String(s)}`): number {\n  const n = parseInt(s ?? \"\");\n  if (isNaN(n)) throw Error(errorMessage());\n  return n;\n}\n\nexport function requireType<T>(\n  o: unknown,\n  t: new (...a: unknown[]) => T,\n  errorMessage = () => `Unexpected type: expected as ${String(t)}, but actual type ${String(o)}`,\n): T {\n  if (o instanceof t) return o;\n  throw Error(errorMessage());\n}\n\nexport function component<T extends HTMLElement = HTMLElement>(id: string | undefined | null, t?: new (...a: unknown[]) => T): T {\n  const i = requireNonnull(id, () => \"Unexpected argument: id is null\");\n  const e = requireNonnull(document.getElementById(i), () => `Element not found: #${i}`);\n  return t ? requireType(e, t) : (e as T);\n}\n\nexport function removeAllChildren(e: HTMLElement): void {\n  while (e.lastChild) e.removeChild(e.lastChild);\n}\n\nexport function humanreadableDistance([direction, distance]: [Direction | null, number]): string {\n  const dir = direction ?? \"\";\n  if (distance < 1000) {\n    return `${dir} ${distance.toString()}m`;\n  }\n  return `${dir} ${(distance / 1000).toFixed(2)}km`;\n}\n\nexport function waitAnimationFrame(): Promise<number> {\n  return new Promise((r) => requestAnimationFrame(r));\n}\n\ninterface EventOffsets {\n  offsetX: number;\n  offsetY: number;\n}\n\nexport async function formatCoords(\n  map: GameMapSize | null,\n  canvas: HTMLCanvasElement,\n  elevation: (coods: GameCoords) => Promise<number | null>,\n  event: EventOffsets | null,\n): Promise<string> {\n  if (!event || !map) return \"E/W: -, N/S: -, Elev: -\";\n\n  const gameCoords = canvasEventToGameCoords(event, map, canvas);\n  if (gameCoords === null) return \"E/W: -, N/S: -, Elev: -\";\n\n  const y = (await elevation(gameCoords)) ?? \"-\";\n  return `E/W: ${gameCoords.x.toString()}, N/S: ${gameCoords.z.toString()}, Elev: ${y.toString()}`;\n}\n\nexport function downloadCanvasPng(fileName: string, canvas: HTMLCanvasElement): void {\n  const a = document.createElement(\"a\");\n  a.download = fileName;\n  a.href = canvas.toDataURL(\"image/png\");\n  a.click();\n}\n\nexport async function sleep(msec: number): Promise<void> {\n  return new Promise((r) => setTimeout(r, msec));\n}\n\nexport function gameMapSize(s: { width: number; height: number }): GameMapSize {\n  return { type: \"game\", ...s };\n}\n\nexport function gameCoords(c: { x: number; z: number }): GameCoords {\n  return { type: \"game\", ...c };\n}\n\n/** Returns null if the event was fired out of the canvas */\nexport function canvasEventToGameCoords(event: EventOffsets, mapSize: GameMapSize, canvasSize: HTMLCanvasElement): GameCoords | null {\n  // in-game scale coords with left-top offset\n  const gx = (event.offsetX * mapSize.width) / canvasSize.width;\n  const gz = (event.offsetY * mapSize.height) / canvasSize.height;\n  if (gx < 0 || gx >= mapSize.width || gz < 0 || gz >= mapSize.height) {\n    return null;\n  }\n\n  // in-game coords (center offset)\n  const x = gx - Math.floor(mapSize.width / 2);\n  const z = Math.floor(mapSize.height / 2) - gz;\n  return gameCoords({ x: Math.round(x), z: Math.round(z) });\n}\n\nexport function threePlaneSize(width: number, height: number): ThreePlaneSize {\n  return { type: \"threePlane\", width, height };\n}\n\nexport function printError(e: unknown): void {\n  console.error(\"%o\", e);\n}\n\nexport async function fetchJson<T>(url: string): Promise<T> {\n  const r = await fetch(url);\n  if (!r.ok) throw Error(`Failed to fetch ${url}: ${r.statusText}`);\n  return (await r.json()) as T;\n}\n\nexport function basename(path: string) {\n  return path.substring(path.lastIndexOf(\"/\") + 1);\n}\n\nexport async function readWholeStream(stream: ReadableStream<Uint8Array>): Promise<Uint8Array> {\n  return new Uint8Array(await new Response(stream).arrayBuffer());\n}\n", "import { sleep } from \"./utils\";\n\nexport function throttledInvoker(asyncFunc: () => Promise<void> | void, intervalMs = 100): () => Promise<void> {\n  const workerPromises: Promise<void>[] = [];\n  let lastInvokationAt = 0;\n  return () => {\n    switch (workerPromises.length) {\n      case 0: {\n        const p = (async () => {\n          const now = Date.now();\n          if (now < lastInvokationAt + intervalMs) await sleep(lastInvokationAt + intervalMs - now);\n          lastInvokationAt = Date.now();\n          try {\n            await asyncFunc();\n          } finally {\n            void workerPromises.shift();\n          }\n        })();\n        workerPromises.push(p);\n        return p;\n      }\n      case 1: {\n        const prev = workerPromises[0];\n        const p = (async () => {\n          await prev;\n          await sleep(intervalMs);\n          lastInvokationAt = Date.now();\n          try {\n            await asyncFunc();\n          } finally {\n            void workerPromises.shift();\n          }\n        })();\n        workerPromises.push(p);\n        return p;\n      }\n      case 2:\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return workerPromises[1]!;\n      default:\n        throw Error(`Unexpected state: promiceses=${workerPromises.length.toString()}`);\n    }\n  };\n}\n", "import { MapFileName } from \"../../lib/map-files\";\n\nconst MAPS_DIR = \"maps\";\nconst WORKSPACE_DIR = \"workspace\";\n\nexport async function* listMapDirs(): AsyncIterable<MapDir> {\n  const worlds = await mapsDir();\n  for await (const entry of worlds.values()) {\n    if (entry.kind === \"directory\") {\n      yield new MapDir(entry as FileSystemDirectoryHandle);\n    }\n  }\n}\n\nexport async function mapDir(name: string): Promise<MapDir> {\n  const worlds = await mapsDir();\n  return new MapDir(await worlds.getDirectoryHandle(name, { create: true }));\n}\n\nexport async function workspaceDir(): Promise<MapDir> {\n  const root = await navigator.storage.getDirectory();\n  return new MapDir(await root.getDirectoryHandle(WORKSPACE_DIR, { create: true }));\n}\n\nasync function mapsDir() {\n  const root = await navigator.storage.getDirectory();\n  return root.getDirectoryHandle(MAPS_DIR, { create: true });\n}\n\nexport class MapDir {\n  #dir: FileSystemDirectoryHandle;\n\n  constructor(dir: FileSystemDirectoryHandle) {\n    this.#dir = dir;\n  }\n\n  get name(): string {\n    return this.#dir.name;\n  }\n\n  async put(name: MapFileName, data: ArrayBuffer | Blob | ReadableStream<Uint8Array>) {\n    console.debug(\"put\", name);\n    const file = await this.#dir.getFileHandle(name, { create: true });\n    const writable = await file.createWritable();\n    if (data instanceof ArrayBuffer || data instanceof Blob) {\n      await writable.write(data);\n    } else {\n      await data.pipeTo(writable);\n    }\n    await writable.close();\n  }\n\n  async createWritable(name: MapFileName): Promise<FileSystemWritableFileStream> {\n    const file = await this.#dir.getFileHandle(name, { create: true });\n    return await file.createWritable();\n  }\n\n  async get(name: MapFileName): Promise<File | null> {\n    console.debug(\"get\", name);\n    try {\n      const file = await this.#dir.getFileHandle(name);\n      return await file.getFile();\n    } catch (e: unknown) {\n      if (e instanceof DOMException && e.name === \"NotFoundError\") {\n        return null;\n      }\n      throw e;\n    }\n  }\n\n  async size(name: MapFileName): Promise<number> {\n    const file = await this.#dir.getFileHandle(name);\n    return (await file.getFile()).size;\n  }\n\n  async remove(name: MapFileName) {\n    await this.#dir.removeEntry(name);\n  }\n}\n", "const NO_VALUE = Symbol(\"NO_VALUE\");\ntype NoValue = typeof NO_VALUE;\n\n/**\n * A holder for a cached value.\n *\n * The cache is invalidated after `age` since the last access.\n */\nexport class CacheHolder<T> {\n  #fetcher: () => Promise<T>;\n  #deconstructor: (value: T) => unknown;\n  #age: number;\n\n  #value: T | NoValue = NO_VALUE;\n  #fetchPromise: Promise<T> | null = null;\n  #expirationTimeout: ReturnType<typeof setTimeout> | null = null;\n  #lastInvalidation = Date.now();\n\n  constructor(fetcher: () => Promise<T>, deconstructor: (value: T) => unknown, age = 10000) {\n    this.#fetcher = fetcher;\n    this.#deconstructor = deconstructor;\n    this.#age = age;\n  }\n\n  /**\n   * Get the value from the cache.\n   *\n   * If the value is not in the cache, it is fetched and stored.\n   */\n  async get(): Promise<T> {\n    try {\n      return this.#value === NO_VALUE ? await this.#fetch() : this.#value;\n    } finally {\n      this.#resetTimer();\n    }\n  }\n\n  async #fetch() {\n    if (this.#fetchPromise) return this.#fetchPromise;\n    this.#fetchPromise = this.#fetchUntilNoInvalidation();\n    try {\n      this.#value = await this.#fetchPromise;\n    } finally {\n      this.#fetchPromise = null;\n    }\n    return this.#value;\n  }\n\n  async #fetchUntilNoInvalidation(): Promise<T> {\n    let now: number;\n    let value: T;\n    do {\n      now = Date.now();\n      value = await this.#fetcher();\n    } while (now < this.#lastInvalidation);\n    return value;\n  }\n\n  /**\n   * Invalidate the cache.\n   */\n  invalidate() {\n    if (this.#value !== NO_VALUE) {\n      this.#deconstructor(this.#value);\n      this.#value = NO_VALUE;\n    }\n    if (this.#expirationTimeout) clearTimeout(this.#expirationTimeout);\n    this.#expirationTimeout = null;\n    this.#lastInvalidation = Date.now();\n  }\n\n  #resetTimer() {\n    if (this.#expirationTimeout) clearTimeout(this.#expirationTimeout);\n    this.#expirationTimeout = setTimeout(() => {\n      this.invalidate();\n    }, this.#age);\n  }\n}\n", "import { throttledInvoker } from \"./throttled-invoker\";\nimport { gameMapSize } from \"./utils\";\nimport * as storage from \"./storage\";\nimport * as mapFiles from \"../../lib/map-files\";\nimport { CacheHolder } from \"./cache-holder\";\n\nconst SIGN_CHAR = \"\u2718\";\nconst MARK_CHAR = \"\uD83D\uDEA9\";\n\ninterface FontFamilies {\n  [SIGN_CHAR]: string;\n  [MARK_CHAR]: string;\n}\n\nexport default class MapRenderer {\n  brightness = \"100%\";\n  markerCoords: GameCoords | null = null;\n  scale = 0.1;\n  showPrefabs = true;\n  prefabs: HighlightedPrefab[] = [];\n  signSize = 200;\n  signAlpha = 1;\n  biomesAlpha = 1;\n  splat3Alpha = 1;\n  splat4Alpha = 1;\n  radAlpha = 1;\n\n  canvas: OffscreenCanvas;\n  #mapSize = gameMapSize({ width: 0, height: 0 });\n\n  #biomesImage = new BitmapHolder(\"biomes.png\");\n  #splat3Image = new BitmapHolder(\"splat3.png\");\n  #splat4Image = new BitmapHolder(\"splat4.png\");\n  #radImage = new BitmapHolder(\"radiation.png\");\n  #imageFiles = [this.#biomesImage, this.#splat3Image, this.#splat4Image, this.#radImage] as const;\n  #fontFamilies: FontFamilies;\n\n  constructor(canvas: OffscreenCanvas, fontFamilies: FontFamilies) {\n    this.canvas = canvas;\n    this.#fontFamilies = fontFamilies;\n  }\n\n  set invalidate(fileNames: (\"biomes.png\" | \"splat3.png\" | \"splat4.png\" | \"radiation.png\")[]) {\n    for (const fileName of fileNames) {\n      switch (fileName) {\n        case \"biomes.png\":\n          this.#biomesImage.invalidate();\n          break;\n        case \"splat3.png\":\n          this.#splat3Image.invalidate();\n          break;\n        case \"splat4.png\":\n          this.#splat4Image.invalidate();\n          break;\n        case \"radiation.png\":\n          this.#radImage.invalidate();\n          break;\n        default:\n          throw new Error(`Invalid file name: ${String(fileName)}`);\n      }\n    }\n  }\n\n  update = throttledInvoker(async () => {\n    console.log(\"MapUpdate\");\n    console.time(\"MapUpdate\");\n    await this.#updateImmediately();\n    console.timeEnd(\"MapUpdate\");\n  });\n\n  async #updateImmediately(): Promise<void> {\n    const [biomes, splat3, splat4, rad] = await Promise.all(this.#imageFiles.map((i) => i.get()));\n\n    const { width, height } = mapSize(biomes, splat3, splat4, rad);\n    this.#mapSize.width = width;\n    this.#mapSize.height = height;\n    if (width === 0 || height === 0) {\n      this.canvas.width = 1;\n      this.canvas.height = 1;\n      return;\n    }\n\n    this.canvas.width = width * this.scale;\n    this.canvas.height = height * this.scale;\n\n    const context = this.canvas.getContext(\"2d\");\n    if (!context) return;\n    context.imageSmoothingEnabled = false;\n    context.scale(this.scale, this.scale);\n    context.filter = `brightness(${this.brightness})`;\n\n    if (biomes && this.biomesAlpha !== 0) {\n      context.globalAlpha = this.biomesAlpha;\n      context.drawImage(biomes, 0, 0, width, height);\n    }\n    context.imageSmoothingEnabled = true;\n    if (splat3 && this.splat3Alpha !== 0) {\n      context.globalAlpha = this.splat3Alpha;\n      context.drawImage(splat3, 0, 0, width, height);\n    }\n    if (splat4 && this.splat4Alpha !== 0) {\n      context.globalAlpha = this.splat4Alpha;\n      context.drawImage(splat4, 0, 0, width, height);\n    }\n    context.imageSmoothingEnabled = false;\n\n    context.filter = \"none\";\n    if (rad && this.radAlpha !== 0) {\n      context.globalAlpha = this.radAlpha;\n      context.drawImage(rad, 0, 0, width, height);\n    }\n\n    context.globalAlpha = this.signAlpha;\n    if (this.showPrefabs) {\n      this.drawPrefabs(context, width, height);\n    }\n    if (this.markerCoords) {\n      this.drawMark(context, width, height);\n    }\n  }\n\n  private drawPrefabs(ctx: OffscreenCanvasRenderingContext2D, width: number, height: number) {\n    ctx.font = `${this.signSize.toString()}px '${this.#fontFamilies[SIGN_CHAR]}'`;\n    ctx.fillStyle = \"red\";\n    ctx.textAlign = \"center\";\n    ctx.textBaseline = \"middle\";\n\n    const offsetX = width / 2;\n    const offsetY = height / 2;\n\n    const charOffsetX = Math.round(this.signSize * 0.01);\n    const charOffsetY = Math.round(this.signSize * 0.05);\n\n    // Inverted iteration to overwrite signs by higher order prefabs\n    for (const prefab of this.prefabs.toReversed()) {\n      const x = offsetX + prefab.x + charOffsetX;\n      // prefab vertical positions are inverted for canvas coodinates\n      const z = offsetY - prefab.z + charOffsetY;\n      putText(ctx, { text: SIGN_CHAR, x, z, size: this.signSize });\n    }\n  }\n\n  private drawMark(ctx: OffscreenCanvasRenderingContext2D, width: number, height: number) {\n    if (!this.markerCoords) return;\n\n    ctx.font = `${this.signSize.toString()}px '${this.#fontFamilies[MARK_CHAR]}'`;\n    ctx.fillStyle = \"red\";\n    ctx.textAlign = \"left\";\n    ctx.textBaseline = \"alphabetic\";\n\n    const offsetX = width / 2;\n    const offsetY = height / 2;\n    const charOffsetX = -1 * Math.round(this.signSize * 0.32);\n    const charOffsetY = -1 * Math.round(this.signSize * 0.1);\n\n    const x = offsetX + this.markerCoords.x + charOffsetX;\n    const z = offsetY - this.markerCoords.z + charOffsetY;\n\n    putText(ctx, { text: MARK_CHAR, x, z, size: this.signSize });\n  }\n\n  size(): GameMapSize {\n    return this.#mapSize;\n  }\n}\n\nfunction mapSize(...images: (ImageBitmap | null | undefined)[]): GameMapSize {\n  return gameMapSize({\n    width: Math.max(...images.map((i) => i?.width ?? 0)),\n    height: Math.max(...images.map((i) => i?.height ?? 0)),\n  });\n}\n\ninterface MapSign {\n  text: string;\n  x: number;\n  z: number;\n  size: number;\n}\n\nfunction putText(ctx: OffscreenCanvasRenderingContext2D, { text, x, z, size }: MapSign) {\n  ctx.lineWidth = Math.round(size * 0.2);\n  ctx.strokeStyle = \"rgba(0, 0, 0, 0.8)\";\n  ctx.strokeText(text, x, z);\n\n  ctx.lineWidth = Math.round(size * 0.1);\n  ctx.strokeStyle = \"white\";\n  ctx.strokeText(text, x, z);\n\n  ctx.fillText(text, x, z);\n}\n\nclass BitmapHolder extends CacheHolder<ImageBitmap | null> {\n  constructor(readonly fileName: mapFiles.MapFileName) {\n    super(\n      async () => {\n        console.log(\"Loading image\", fileName);\n        const workspace = await storage.workspaceDir();\n        const file = await workspace.get(fileName);\n        try {\n          return file ? await createImageBitmap(file) : null;\n        } finally {\n          console.log(\"Loaded image\", fileName);\n        }\n      },\n      (img) => img?.close(),\n    );\n  }\n}\n", "import MapRenderer from \"../lib/map-renderer\";\nimport { printError } from \"../lib/utils\";\n\nexport type InMessage = Partial<\n  Pick<\n    MapRenderer,\n    | \"canvas\"\n    | \"biomesAlpha\"\n    | \"splat3Alpha\"\n    | \"splat4Alpha\"\n    | \"radAlpha\"\n    | \"showPrefabs\"\n    | \"brightness\"\n    | \"scale\"\n    | \"signSize\"\n    | \"signAlpha\"\n    | \"prefabs\"\n    | \"markerCoords\"\n    | \"invalidate\"\n  >\n>;\n\nexport interface OutMessage {\n  mapSize: GameMapSize;\n}\n\nlet map: MapRenderer | null = null;\n\nconst fontFaces = {\n  \"Noto Sans Symbols 2\": new FontFace(\"Noto Sans Symbols 2\", \"url('../NotoSansSymbols2.subset.woff2') format('woff2')\"),\n  \"Noto Emoji Old\": new FontFace(\"Noto Emoji Old\", \"url('../NotoEmojiOld.subset.woff2') format('woff2')\"),\n  // See tools/fonts/subset.sh\n  // \"Noto Emoji\": new FontFace(\"Noto Emoji\", \"url('../NotoEmoji.subset.woff2') format('woff2')\"),\n} as const;\nPromise.all(\n  Object.values(fontFaces).map(async (fontFace) => {\n    await fontFace.load();\n    self.fonts.add(fontFace);\n    if (map) {\n      await map.update();\n      postMessage({ mapSize: map.size() });\n    }\n    console.log(\"map-renderer: loaded font\", fontFace);\n  }),\n).catch(printError);\n\nconst mapFonts = {\n  \"\u2718\": fontFaces[\"Noto Sans Symbols 2\"].family,\n  \"\uD83D\uDEA9\": fontFaces[\"Noto Emoji Old\"].family,\n};\n\nonmessage = async (event: MessageEvent<InMessage>) => {\n  const message = event.data;\n  console.log(\"map-renderer: recieved %o\", message);\n  if (!map) {\n    if (message.canvas) {\n      map = new MapRenderer(message.canvas, mapFonts);\n    } else {\n      throw Error(\"Unexpected state\");\n    }\n  }\n  await Object.assign(map, message).update();\n  const out = { mapSize: map.size() };\n  console.log(\"map-renderer: sending %o\", out);\n  postMessage(out);\n};\n"],
  "mappings": "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",
  "names": ["sleep", "msec", "r", "gameMapSize", "s", "printError", "e", "throttledInvoker", "asyncFunc", "intervalMs", "workerPromises", "lastInvokationAt", "p", "now", "sleep", "prev", "WORKSPACE_DIR", "workspaceDir", "root", "MapDir", "WORKSPACE_DIR", "MapDir", "#dir", "dir", "name", "data", "writable", "e", "NO_VALUE", "CacheHolder", "#fetcher", "#deconstructor", "#age", "#value", "#fetchPromise", "#expirationTimeout", "#lastInvalidation", "fetcher", "deconstructor", "age", "#fetch", "#resetTimer", "#fetchUntilNoInvalidation", "now", "value", "SIGN_CHAR", "MARK_CHAR", "MapRenderer", "#mapSize", "gameMapSize", "#biomesImage", "BitmapHolder", "#splat3Image", "#splat4Image", "#radImage", "#imageFiles", "#fontFamilies", "canvas", "fontFamilies", "fileNames", "fileName", "throttledInvoker", "#updateImmediately", "biomes", "splat3", "splat4", "rad", "i", "width", "height", "mapSize", "context", "ctx", "offsetX", "offsetY", "charOffsetX", "charOffsetY", "prefab", "x", "z", "putText", "images", "text", "size", "CacheHolder", "file", "workspaceDir", "img", "map", "fontFaces", "fontFace", "printError", "mapFonts", "event", "message", "MapRenderer", "out"]
}
